@using Microsoft.AspNetCore.Identity
@model MyBulkMealsApp.Data.PaginatedList<MyBulkMealsApp.Models.Recipe>
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager

@{
    ViewData["Title"] = "My Recipes";
    Layout = "~/Views/Shared/_Layout.cshtml";

    bool showCreatedTime = (ViewData["ShowCreatedTime"] != null && (bool)ViewData["ShowCreatedTime"]);
    var user = await UserManager.GetUserAsync(User);
    var currentUserId = user?.Id;
    bool isAdmin = false;
    if (user != null)
    {
        isAdmin = UserManager.GetRolesAsync(user).Result.FirstOrDefault(c => c.Contains("Admin")) != null;
    }

    Dictionary<int, bool> SavedIds = (Dictionary<int, bool>)ViewData["SavedIds"];
}

<a class="btn btn-lg btn-info float-right" asp-action="Report">
    <i aria-hidden="true" class="fa fa-line-chart"></i>
    View Reports
</a>
<h1>Recipes</h1>
<hr />

<h2>Popular Searches</h2>
<ul class="list-inline">
    <li class="list-inline-item">
        <a class="btn btn-outline-info" asp-action="Index">View All</a>
    </li>
    @if (SignInManager.IsSignedIn(User))
    {
        <li class="list-inline-item">
            <a class="btn btn-outline-info" asp-action="Created">My Created Recipes</a>
        </li>
        <li class="list-inline-item">
            <a class="btn btn-outline-info" asp-action="Saved">My Saved Recipes</a>
        </li>
    }
    <li class="list-inline-item">
        <a class="btn btn-outline-info" asp-action="Popular">Most Viewed</a>
    </li>
    <li class="list-inline-item">
        <a class="btn btn-outline-info" asp-action="Newest">Newest</a>
    </li>
    <li class="list-inline-item">
        <a class="btn btn-outline-info" asp-action="Random" asp-route-quantity="20">Random</a>
    </li>
</ul>

<div class="m-4">
    <form asp-action="Results">
        <label for="recipeSearch">Quick Search by Keyword</label>
        <div class="input-group input-group-lg">
            <div class="input-group-prepend">
                <span class="input-group-text" id="inputGroup-sizing-lg">
                    <i class="fa fa-search"></i>
                </span>
            </div>
            <input id="recipeSearch" name="keyword" type="text" class="form-control" aria-describedby="inputGroup-sizing-lg">
            <button class="btn btn-primary">GO!</button>
        </div>
    </form>
</div>

<table class="table-bordered table-striped w-100 font-size--1point5">
    <thead>
        <tr>
            <th>
                Recipe Name
            </th>
            <th>
                @*Verified*@
            </th>

            @if (showCreatedTime)
            {
                <th>
                    Created At
                </th>
            }
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr data-saved="@(SavedIds.Keys.Contains(item.Id) ? SavedIds[item.Id] : false)">
                <td>
                    <a asp-action="Details" asp-route-id="@item.Id">
                        @Html.DisplayFor(modelItem => item.ItemName)
                    </a>
                </td>
                <td>
                    @if (item.IsVerified)
                    {
                        <i class="fa fa-check-circle"></i>
                    }
                </td>
                @if (showCreatedTime)
                {
                    <td>
                        @Html.DisplayFor(modelItem => item.CreatedTime)
                    </td>
                }
                <td>
                    @if ((item.CreatorId == currentUserId && !item.IsVerified) || isAdmin)
                    {
                        <a asp-action="Edit" asp-route-id="@item.Id">Edit</a>
                        <span>|</span>
                        <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
}

<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-pageNumber="@(Model.PageIndex - 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default  btn-outline-info btn-lg mt-2 @prevDisabled">
    <i class="fa fa-arrow-left mr-1" aria-hidden="true"></i>
    Previous
</a>
<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-pageNumber="@(Model.PageIndex + 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default btn-outline-info btn-lg mt-2 @nextDisabled">
    Next
    <i class="fa fa-arrow-right ml-1" aria-hidden="true"></i>
</a>

<div>
    <a asp-action="Create" class="btn btn-default btn-outline-primary btn-lg  mt-2">
        <i class="fa fa-plus mr-1" aria-hidden="true"></i>
        Create New
    </a>
</div>